import streamlit as st
from datetime import date
from babel.dates import format_datetime
import altair as alt

from utils import *
import pandas as pd

st.set_page_config(
    page_title="Team Crevette", 
    page_icon="‚ú®", 
    layout='centered', 
    initial_sidebar_state='auto', 
    menu_items=None)

with st.container():
    today = date.today()
    dpa = date(2022, 2, 12)
    days = (dpa-today).days

    st.markdown(f"# ‚ú® Team Crevette ‚ú®") #J - {days} ! ‚ú®
    st.write("~~")
    st.markdown("""Bienvenue sur la page de visualisation de vos pronostics !
    \nVous avez √©t√© **{}** personnes √† participer.
    {} √©tant l√†, il est bien entendu trop tard pour participer...        
    """. format(len(df), dict_baby['prenom']))
    st.markdown("Je me suis bien amus√©e √† faire cette page, alors **merci √† vous** ! ü§ó")
    st.write("""&nbsp;  
    Pour rappel, les 5 personnes avec le plus de points se partageront le poids (r√©el!) du b√©b√©
    en chocolats et/ou bonbons (selon pr√©f√©rence).  
    &nbsp; &nbsp;üç¨ &nbsp; üç´ &nbsp; üç≠
    """)
    st.write("~~")

   ### SIDEBAR
    st.markdown("**Fun place !**")
    st.markdown("<small>Choisissez votre mode d'affichage ci-dessous. Vous pouvez aussi changer les couleurs (√ßa ne sert √† rien mais c'est rigolo).</small>", unsafe_allow_html=True)
    
    display = st.radio("Visualisations √† afficher", 
    (viz_prono, profile_baby, results))
    
    help_color="Cliquez sur la couleur √† modifier, s√©lectionnez la nouvelle couleur, puis cliquez √† c√¥t√© pour valider."
    cols = st.columns(3)
    color_girl = cols[0].color_picker(label="Couleur Fille", value='#1FC3AA', help=help_color)
    color_boy = cols[1].color_picker(label="Couleur Gar√ßon", value='#ff8c00', help=help_color)

    ## COLOR-RELATED VARIABLES
    colors_gender = [color_girl, color_boy]
    color_scale_gender = alt.Scale(domain=sexes, range=colors_gender)
    condition_color_gender = alt.condition(selector, 'sexe:N',
                        alt.value('lightgray'), scale=color_scale_gender,
                        legend=alt.Legend(title="", labelFontSize=12, orient="right"))


## INTRO
with st.container():

    ### FAIRE-PART
    if display == profile_baby :

        col0, col1, col2 = st.columns((1,4,1))
        
        with col1:
            st.markdown("&nbsp;")
            st.markdown("#### Et voici le tant attendu faire-part du b√©b√© !!")
            
            fake_announcement = st.checkbox("Voir le faire-part bas√© sur les pronostics.")
            if fake_announcement :
                sexe_oppose = st.checkbox("Voir le faire-part du sexe oppos√©.")

            if fake_announcement :
                st.write("Enfin, d'apr√®s vos pronostics...")

                dict_profile = portrait_robot(df, sexe_oppose)
                fig = display_birth_announcement(dict_profile, sexes, colors_gender, dict_cheveux)

                with st.expander("Explications..."):
                        st.markdown("""<small>Rempli avec les valeurs m√©dianes pour la date de naissance, la taille et le poids du b√©b√©, et le choix de la majorit√© pour la longueur et la couleur des cheveux.</small>
                        \n<small>Le pr√©nom est celui qui a √©t√© le plus donn√© pour le sexe majoritaire, par ceux qui ont pr√©dit ce sexe.</small>
                        \n<small>*Par exemple : s'il y a une majorit√© de "gar√ßon", c'est le pr√©nom masculin le plus donn√© par ceux qui ont pr√©dit "gar√ßon".*</small>
                        """, unsafe_allow_html=True)

            else :
                fig = display_birth_announcement(dict_baby, sexes, colors_gender, dict_cheveux)
                
            st.pyplot(fig)

    ### VIZ PRONOS
    if display == viz_prono :

        ## CAMEMBERT SEXE
        st.markdown("&nbsp;")
        col1, col0, col2 = st.columns((2,5,2))

        col0.markdown("## ‚ö§ &nbsp; Sexe")
        fig = sex_predictions(df['sexe'], sexes, colors_gender)
        col0.pyplot(fig)

        ### DATE DE NAISSANCE
        with st.container():
            st.markdown("&nbsp;")
            st.markdown("## üìÜ &nbsp; Date de naissance")
            st.markdown("&nbsp;")
            st.markdown(zoom_possible)
            st.markdown("ü™ß Terme : **12 f√©vrier 2022** (en gris clair).")
            st.markdown("ü•≥ Naissance de {} : **{}** (en violet).".format(dict_baby['prenom'],format_datetime(dict_baby['birthday'],"d MMMM yyyy '√†' H'h'mm ", locale='fr') ))

            expected_d_day, d_day, pred_ticks = display_birthdate_pred(base, condition_color_gender)
            st.altair_chart(alt.layer(expected_d_day, d_day, pred_ticks), use_container_width=True)


        ### TAILLE + POIDS
        with st.container():
            st.markdown('## üìè &nbsp; Mensurations...')
            st.markdown("&nbsp;")
            st.markdown(zoom_possible)

            st.markdown("Les mensurations √† la naissance de Florian sont en rouge fonc√©, celles d'H√©l√®ne en bleu.")
            st.markdown("Les mensurations de **Rapha√´l** sont en **violet** !")
            st.markdown("&nbsp;")

            top_chart, points, right_chart = size_charts(base, condition_color_gender, selector)
            st.altair_chart(top_chart & (points | right_chart), use_container_width=True)
            
        ### CAPILARITE
        with st.container():
            st.markdown("## üíà &nbsp; Et les cheveux ?")      
            fig = cool_hair_plot(df, dict_cheveux)
            st.pyplot(fig)

        ### PRENOM
        with st.container():
            st.markdown("## ‚úèÔ∏è &nbsp; Et enfin... le pr√©nom !")
            st.markdown("&nbsp;")

            freq_masc = df.prenom_masc.value_counts()
            freq_fem = df.prenom_fem.value_counts()
            max_freq, prenoms_max, nb_freq = most_voted_names(freq_masc, freq_fem)

            st.markdown("""Plus un pr√©nom est √©crit en gros, plus vous avez √©t√© nombreux √† miser dessus üòâ 
            &nbsp;  
            *N.B. : Les pr√©noms n'ont pas non plus √©t√© propos√©s 50 fois, le maximum √©tant "seulement" de {} fois pour le{} pr√©nom{} {} !*
            """.format(max_freq,
                    's' if nb_freq>1 else "",
                    's' if nb_freq>1 else "",           
            ", ".join(prenoms_max[:-1]) + (" & " if nb_freq>1 else "") + prenoms_max[-1]))

            fig = both_gender_cloud(freq_masc, freq_fem, colors_gender, "cloud-icon.png")
            st.pyplot(fig)


        ## Fille et gar√ßon s√©par√©s !
        with st.container() :

            mask_path_thunder = "thunder.png"    
            fig_female = one_gender_cloud(freq_fem, colors_gender[0], mask_path_thunder)
            fig_male = one_gender_cloud(freq_masc, colors_gender[1], mask_path_thunder)

            col1, col2 = st.columns(2)
            col1.pyplot(fig_female)
            col2.pyplot(fig_male)

    if display == results:
        ## Profil b√©b√©
        with st.container() :

            jour = format_datetime(dict_baby['birthday'],"EEEE d MMMM yyyy '√†' H'h'mm ", locale='fr')
            fille = 'e' if dict_baby['sexe'] == "Fille" else ''
            pronom = "elle" if dict_baby['sexe'] == "Fille" else 'il'

            st.markdown("&nbsp;")
            st.markdown(f"<center><h5> ü•≥ &nbsp; <b>C'est un{fille} {dict_baby['sexe'].lower()} !</b> &nbsp; ü•≥</h5></center>",
                unsafe_allow_html=True)
            st.markdown(f"""<center>Notre petit{fille} {dict_baby['prenom']} est n√©{fille}</br>le {jour.strip()}, </br>
            {pronom} pesait alors {int(dict_baby['poids']):1,} kg pour {int(dict_baby['taille'])} cm,</center>""",
                unsafe_allow_html=True) 

            if dict_baby['chevelure'] == 'Pas de cheveux !':
                st.markdown(f"<center>et {pronom} √©tait chauve !</center>", unsafe_allow_html=True)
            else :
                st.markdown(f"""<center>ses cheveux sont {dict_baby['couleur_cheveux'].lower()} 
                ({dict_baby['chevelure'].lower()}).</center>""",
                    unsafe_allow_html=True)

            st.markdown("&nbsp;")
            
        ## PROFIL "GAGNANT" DU B√âB√â
        with st.container() :
            st.markdown("#### Profil du b√©b√©")

            with st.expander("""Par d√©faut, ce sont les valeurs r√©elles qui sont renseign√©es. 
            Vous pouvez les modifier pour voir comment le classement √©volue..."""):
                dict_win = {
                    'birthday_day' : st.date_input(
                        "Date de naissance",
                        value=dict_baby['birthday'],
                        min_value=date(2021,12,1),
                        max_value=date(2022, 2, 28)
                    ),
                    'birthday_time' : st.time_input(
                        "Heure de naissance",
                        dict_baby['birthday'],
                        True
                    ),
                    'sexe' : st.radio(
                        "Sexe",
                        ('Gar√ßon', 'Fille'),
                        0 if dict_baby['sexe']== 'Gar√ßon' else 1
                    ),
                    'prenom' : st.text_input('Pr√©nom',dict_baby['prenom']),
                    'taille': st.slider(
                        "Taille (cm)", 40, 60, dict_baby['taille']
                    ),
                    'poids': st.number_input(
                        "Poids (g)", 2000, 5000, dict_baby['poids']
                    ),
                    'chevelure': st.select_slider(
                        "Chevelure",
                        dict_cheveux['ordre_cheveux'][::-1],
                        dict_baby['chevelure']
                    ),
                    'couleur_cheveux' : st.select_slider(
                        "Couleur des cheveux",
                        dict_cheveux['ordre_couleur'][::-1],
                        dict_baby['couleur_cheveux']
                    )
                }

            dict_win['birthday'] = pd.Timestamp.combine(dict_win['birthday_day'], dict_win['birthday_time'])
            dict_win.pop('birthday_day')
            dict_win.pop('birthday_time')


        ## CLASSEMENT
        with st.container() :

            st.markdown("&nbsp;")
            st.markdown("#### Classement des participants")

            st.write("Triez selon une colonne en cliquant sur son titre.")
            with st.expander("Chaque crit√®re rapporte jusqu'√† 1 point. Voir plus de d√©tails..." ) :
                st.markdown(f"**Sexe** : si bonne r√©ponse ({dict_baby.sexe}), sinon 0 pt.")
                st.markdown(f"**Date de naissance** : ")
                st.markdown(f"**Poids** : ")
                st.markdown(f"**Taille** : ")
                st.markdown(f"**Cheveux** : ")
                st.markdown(f"**Pr√©nom** : ") 

            df_results = beautify_df(calculate_scores(df, dict_win))
            st.write(df_styler(df_results))

            st.markdown("&nbsp;")
            st.markdown("##### Chercher le score d'un participant")

            participant = st.text_input("Tapez le pr√©nom du participant √† afficher...",)
            participant_selected = False

            if len(participant) > 0:

                df_filter = df_results.loc[df_results['Pr√©nom'].str.lower().str.contains(participant.lower())]

                if len(df_filter) == 0 :
                    col0, col1, col2 = st.columns((2,5,2))
                    with col0 :
                        st.markdown("<center>‚ÅâÔ∏è</center>", unsafe_allow_html=True)
                    with col1 :
                        st.markdown("<center>Pas de r√©sultats... Essayez avec moins de lettres ?</center>", unsafe_allow_html=True)
                    with col2 :
                        st.markdown("<center>‚ÅâÔ∏è</center>", unsafe_allow_html=True)

                else :
                    if len(df_filter) > 1 :
                        options = {}
                        for index, row in df_filter.iterrows():
                            options[index] = f'{row.Pr√©nom} {row.Nom}'

                        st.write('&nbsp;')
                        selected = st.selectbox(
                            "Plusieurs participants ont √©t√© trouv√©s. Choisissez le participant √† afficher :", 
                            options=options.keys(),
                            format_func= lambda x:options[x]
                            )
                        
                        df_filter = df_filter.reset_index()
                        serie_participant = pd.Series(df_filter.loc[df_filter['place'] == selected].iloc[0], dtype='str')
                        participant_selected =  True

                    else : #len(df_filter) ==1 :  
                        serie_participant = pd.Series(df_filter.reset_index(level=0).iloc[0], dtype='str')
                        participant_selected = True

                    st.write('&nbsp;')
                    scores_participant(serie_participant, len(df_results))
            
            st.write('&nbsp;')


        ## FAUX PRONOS
        with st.container():
            st.markdown("#### Faux pronostics")
            st.markdown("R√©alisez de faux pronostics pour voir quel classement vous auriez pu avoir !")

            with st.expander(f"""Par d√©faut, ce sont les valeurs de naissance de {dict_baby['prenom']} qui sont renseign√©es."""):

                dict_default = dict_baby.copy()

                prenom_masc = dict_default['prenom'] if dict_default['sexe']== 'Gar√ßon' else ""
                prenom_fem = "" if dict_default['sexe']== 'Gar√ßon' else dict_default['prenom']

                dict_fake = {
                    'prenom' : 'Pourde',
                    'nom' : 'Fo.',
                    'birthday_day' : st.date_input(
                        "Date de naissance ",
                        value=dict_default['birthday'],
                        min_value=date(2021,12,1),
                        max_value=date(2022, 2, 28),
                    ),
                    'birthday_time' : st.time_input(
                        "Heure de naissance ",
                        dict_default['birthday'],
                        True,
                    ),
                    'sexe' : st.radio(
                        "Sexe ",
                        ('Gar√ßon', 'Fille'),
                        0 if dict_default['sexe']== 'Gar√ßon' else 1
                    ),
                    'prenom_masc' : st.text_input('Pr√©nom masculin', prenom_masc),
                    'prenom_fem' : st.text_input('Pr√©nom f√©minin', prenom_fem),
                    'taille': st.slider(
                        "Taille (cm) ", 40, 60, dict_default['taille']
                    ),
                    'poids': st.number_input(
                        "Poids (g) ", 2000, 5000, dict_default['poids']
                    ),
                    'longueur_cheveux': st.select_slider(
                        "Chevelure ",
                        dict_cheveux['ordre_cheveux'][::-1],
                        dict_default['chevelure']
                    ),
                    'couleur_cheveux' : st.select_slider(
                        "Couleur des cheveux ",
                        dict_cheveux['ordre_couleur'][::-1],
                        dict_default['couleur_cheveux']
                    )
                }


            dict_fake['date'] = pd.Timestamp.combine(dict_fake['birthday_day'], dict_fake['birthday_time'])
            df_fake = df.append(dict_fake, ignore_index=True)
            len_df = len(df_fake)

            fake_results = beautify_df(calculate_scores(df_fake, dict_win))

            df_fake_filter = fake_results.loc[fake_results['Pr√©nom'] == dict_fake['prenom']]
            fake_participant = pd.Series(df_fake_filter.reset_index(level=0).iloc[0], dtype='str')

            if participant_selected :
                if fake_participant.drop(['Pr√©nom', 'Nom', 'birthday_day', 'birthday_time', 'place']).equals(
                    other=serie_participant.drop(['Pr√©nom', 'Nom', 'place'])) :
                    fake_participant = serie_participant.copy()
                    len_df = len(df_fake)-1

            scores_participant(fake_participant, len_df)

            classement = int(fake_participant['place'])
            st.write('&nbsp;')
            if classement > 1 :
                st.write(f"Score de la personne juste devant : {fake_results.iloc[classement-2]['Score total']} pts.")
            if classement < len_df :
                st.write(f"Score de la personne juste derri√®re : {fake_results.iloc[classement]['Score total']} pts.")
            

# FOOTER
st.markdown(footer,unsafe_allow_html=True)
